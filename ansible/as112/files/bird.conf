timeformat base		iso long;
timeformat log		iso long;
timeformat protocol	iso long;
timeformat route	iso long;

##############################################################################
protocol device { }

filter not_direct { if source = RTS_DEVICE then reject; accept; }
protocol kernel { ipv4 { import none; export filter not_direct; }; }
protocol kernel { ipv6 { import none; export filter not_direct; }; }

protocol direct direct_as112_v4 {
	ipv4;
	interface "as112", "dname";
	check link on;
}

protocol direct direct_as112_v6 {
	ipv6;
	interface "as112", "dname";
	check link on;
}

##############################################################################
function out_filter()
prefix set networks_out;
{
	# only consider device (direct) routes
	if (source != RTS_DEVICE) then return false;

	#bgp_community.add((0, 43369));
	#bgp_community.add((43369, 8816));

	networks_out = [
	192.175.48.0/24,
	192.31.196.0/24,
	2620:4f:8000::/48,
	2001:4:112::/48
	];

	# double check that only approved networks are announced
	if (net !~ networks_out) then {
		return false;
	}

	return true;
}

##############################################################################
template bgp v4_client {
	local as 112;
	ipv4 {
		import all;
		export where out_filter();
	};
}

template bgp v6_client {
	local as 112;
	ipv6 {
		import all;
		export where out_filter();
	};
}

##############################################################################
router id 185.1.114.112;

protocol bgp rs1_v4 from v4_client {
	description "rs1";
	neighbor 185.1.114.252 as 43369;
}

protocol bgp rs2_v4 from v4_client {
	description "rs2";
	neighbor 185.1.114.253 as 43369;
}

protocol bgp rs2_v6 from v6_client {
	description "rs2";
	neighbor 2001:7f8:c5::2 as 43369;
}

protocol bgp rs1_v6 from v6_client {
	description "rs1";
	neighbor 2001:7f8:c5::1 as 43369;
}

